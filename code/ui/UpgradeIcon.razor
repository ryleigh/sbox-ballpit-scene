@using Sandbox;
@using Sandbox.UI;
@inherits Panel
@attribute [StyleSheet( "UpgradeIcon.razor.scss" )]

<root>
	@{
		var player = Manager.Instance.GetPlayer(PlayerNum);
	}

	 @if(player == null) {
		return;
	}

	@{
		var rarity = Manager.Instance.GetRarityForUpgrade(UpgradeType);
		var isSelected = player.SelectedUpgradeType == UpgradeType && player.PlayerNum == PlayerNum;
		var isHovered = Manager.Instance.HoveredUpgradeType == UpgradeType && Manager.Instance.HoveredUpgradePlayerNum == PlayerNum;
		var isPassive = Manager.Instance.IsUpgradePassive(UpgradeType);
		var progress = player.PassiveUpgradeProgress.ContainsKey(UpgradeType) ? player.PassiveUpgradeProgress[UpgradeType] : 0f;
		var useScale = player.UpgradeUseTimes.ContainsKey(UpgradeType) && RealTime.Now - player.UpgradeUseTimes[UpgradeType] < 0.5f
			? Utils.Map(RealTime.Now - player.UpgradeUseTimes[UpgradeType], 0f, 0.4f, 1.25f, 1f, EasingType.BounceOut)
			: 1f;
	}

	<!-- <div class="bg" style="background-image: url(@($"materials/icons/{Globals.GetIconForUpgrade(UpgradeType)}.png"));"></div> -->
	<div class="icon" style="opacity:@((isPassive || isSelected ? 1f : 0.5f) );
						text-stroke: @(Manager.GetOutlineSizeForRarity(rarity))px @(Manager.GetColorForRarity(rarity).Rgba);
						font-size:@((isSelected ? 60f : 38f) * (isHovered ? 1.1f : 1f) * useScale)px;">
		@(Manager.Instance.GetIconForUpgrade(UpgradeType))
	</div>

	@if(Level > 1)
	{
		var isMaxed = Level >= Manager.Instance.GetMaxLevelForUpgrade(UpgradeType);
		

		<div class="level" style="opacity:@((Manager.Instance.IsUpgradePassive(UpgradeType) || player.SelectedUpgradeType == UpgradeType ? 1f : 0.3f) );
							font-size:@((isSelected ? 36f : 28f) * (isHovered ? 1.1f : 1f) * (isPassive ? 1f : useScale))px;
							color:@((isMaxed ? new Color(1f, 0.4f, 0.4f) : new Color(1f, 1f, 1f)).Rgba);">
			@Level
		</div>
	}

	@if(progress > 0f) 
	{
		<div class="progress" style="width:@(Math.Clamp(progress, 0f, 1f) * 100f)%;"></div>
	}
</root>

@code
{
	public UpgradeType UpgradeType { get; set; }
	public int Level { get; set; }
	public int PlayerNum { get; set; }

	protected override void OnMouseOver(MousePanelEvent e)
	{
		Manager.Instance.HoveredUpgradeType = UpgradeType;
		Manager.Instance.HoveredUpgradePlayerNum = PlayerNum;
		// Manager.Instance.HoveredUpgradePos = new Vector2(Position.x, Position.y);

		if(Manager.Instance.IsMouseDown)
			Manager.Instance.GetLocalPlayer()?.SetSelectedActiveUpgrade(UpgradeType);
	}

	protected override void OnMouseOut(MousePanelEvent e)
	{
		Manager.Instance.HoveredUpgradeType = UpgradeType.None;
	}

	protected override void OnMouseDown(MousePanelEvent e)
	{
		var localPlayer = Manager.Instance.GetLocalPlayer();
		if( PlayerNum != localPlayer.PlayerNum )
			return;

		if (e.MouseButton == MouseButtons.Left) 
		{
			localPlayer.SetSelectedActiveUpgrade(UpgradeType);
			Manager.Instance.IsMouseDown = true;
		}
			
		// else if (e.MouseButton == MouseButtons.Right)
		// 	localPlayer.TryUseItem(UpgradeType);
	}

	protected override void OnMouseUp(MousePanelEvent e)
	{
		var localPlayer = Manager.Instance.GetLocalPlayer();
		if(PlayerNum != localPlayer.PlayerNum)
			return;

		if(e.MouseButton == MouseButtons.Left)
			Manager.Instance.IsMouseDown = false;
	}

	public override void OnMouseWheel(Vector2 value)
	{
		var localPlayer = Manager.Instance.GetLocalPlayer();
		if (localPlayer == null)
			return;

		localPlayer.AdjustSelectedActiveUpgrade(up: value.y > 0f);
	}

	protected override int BuildHash()
	{
		var player = Manager.Instance.GetPlayer(PlayerNum);
		var isHovered = Manager.Instance.HoveredUpgradeType == UpgradeType;
		var isSelected = (player?.SelectedUpgradeType ?? UpgradeType.None) == UpgradeType;
		var progress = (player != null && player.PassiveUpgradeProgress.ContainsKey(UpgradeType)) ? player.PassiveUpgradeProgress[UpgradeType] : 0f;
		var useScale = player.UpgradeUseTimes.ContainsKey(UpgradeType) && RealTime.Now - player.UpgradeUseTimes[UpgradeType] < 0.5f
			? Utils.Map(RealTime.Now - player.UpgradeUseTimes[UpgradeType], 0f, 0.4f, 1.25f, 1f, EasingType.BounceOut)
			: 1f;

		return System.HashCode.Combine(UpgradeType, Level, isHovered, isSelected, progress, useScale);
	}
}
