@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class="title">
		Ball Pit

		<div class="version">
			v0.5
		</div>
	</div>

	<div class="info">
		<div class="spacer"></div>
		<div class="section" style="padding: 8px;">@($"Bump balls that match the color of your side")</div>
		<div class="section" style="background-color: #4444aa; color: #4444aa;">@(_anim0[_tick % _anim0.Length])</div>
		<div class="spacer"></div>
		<div class="section" style="padding: 8px;">@($"Avoid balls of your opponent's color")</div>
		<div class="section" style="background-color: #448844; color: #448844;">@(_anim1[_tick % _anim1.Length])</div>
		<div class="spacer"></div>
		<div class="section" style="padding: 8px;">@($"Spend $ to buy and reroll items\n\nPress space to use active items, and mouse wheel to swap")</div>
		<div class="section" style="background-color: #4444aa; color: #4444aa;">@(_anim2[_tick % _anim2.Length])</div>
		<div class="spacer"></div>
		<div class="section" style="padding: 8px;">@($"Winning rounds moves the center line towards you\n\nMove it 5 notches on your side to claim victory!")</div>
		<div class="section" style="background-color: #4444aa; color: #4444aa;">@(_anim3[_tick % _anim3.Length])</div>
		<div class="spacer"></div>
	</div>

	<div class="table">
		<div class="header row">
			<div style="justify-content: flex-start; flex-grow: 1;">
				<div class="name">Name</div>
			</div>
			<div style="justify-content: flex-end; flex-grow: 1;">
				<div class="stat_wins" style="padding-right: 30px;">Wins</div>
				<div class="stat" style="padding-right: 40px;">Losses</div>
				<div class="stat" style="padding-right: 52px;">Time</div>
				<div class="stat" style="padding-right: 0px;">Ping</div>
			</div>
		</div>

		@{
			var rowNum = 0;
		}

		@foreach(var player in Scene.GetAllComponents<PlayerController>().ToList().OrderByDescending(x => x.NumMatchWins))
		{
			// todo: need to handle displaying a large amount of players

			var connection = player.Network.OwnerConnection;
			var nameColor = (Manager.Instance.GetConnection(0) == connection ? Manager.Player0NameColor : (Manager.Instance.GetConnection(1) == connection ? Manager.Player1NameColor : new Color(1f, 1f, 1f)));

			string specialClass = "";
			if(connection == Connection.Local)
				specialClass = "me";

			<div class="row @(rowNum % 2 == 0 ? "even_row" : "odd_row")">
				<div class="avatar" style="background-image: url( avatar:@connection.SteamId )"></div>
				<div class="name @specialClass" style="color:@(nameColor.Rgba);">
					@connection.DisplayName

					@if(connection.IsHost)
					{
						<div style="color: #fff; opacity:0.1; padding-left: 8px; font-family: Proxima Soft;">@("(host)")</div>
					}
				</div>
				<div class="stat_container">
					<div class="stat_kills">@($"{player.NumMatchWins}")</div>
					<div style="font-family: W10Emoji; font-size:18px;">@("🏆")</div>
				</div>
				<div class="stat_container">
					<div class="stat">@($"{player.NumMatchLosses}")</div>
					<div style="font-family: W10Emoji; font-size:18px;">@("💀")</div>
				</div>
				<div class="stat_container">
					<div class="stat" style="opacity:0.3;">@GetTime(connection)</div>
				</div>
				<div class="stat_container">
					<div class="stat" style="opacity:0.3;">@(MathF.Round(connection.Ping))</div>
				</div>
			</div>

			rowNum++;
		}
	</div>

</root>

@code
{
	private int _tick;
	private float _tickTimer;

	private string[] _anim0 = { 
"__.__.__.😄__.__.🔵__.__.__.__.__.\n__.__.__.__.__.__.__.🔵__.__.__.__.",
"__.__.__.😀__.🔵__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.🔵__.__.__.",
"__.__.__.😀🔵__.__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.__.🔵__.__.",
"__.__.__.😄__.🔵__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.__.__.🔵__.",
"__.__.__.😄__.__.🔵__.__.__.__.__.\n__.__.__.__.__.__.__.__.__.__.__.🔵",
"__.__.__.😄__.__.__.🔵__.__.__.__.\n__.__.__.__.__.__.__.__.__.__.🔵__.",
"__.__.__.😄__.__.__.__.🔵__.__.__.\n__.__.__.__.__.__.__.__.__.🔵__.__.",
"__.__.__.😀__.__.__.__.__.🔵__.__.\n__.__.__.__.__.__.__.__.🔵__.__.__.",
"__.__.__.😀__.__.__.__.__.__.🔵__.\n__.__.__.__.__.__.__.🔵__.__.__.__.",
"__.__.__.__.__.__.__.__.__.__.__.🔵\n__.__.__.😀__.__.🔵__.__.__.__.__.",
"__.__.__.__.__.__.__.__.__.__.🔵__.\n__.__.__.😀__.🔵__.__.__.__.__.__.",
"__.__.__.__.__.__.__.__.__.🔵__.__.\n__.__.__.😀🔵__.__.__.__.__.__.__.",
"__.__.__.__.__.__.__.__.🔵__.__.__.\n__.__.__.😄__.🔵__.__.__.__.__.__.",
"__.__.__.__.__.__.__.🔵__.__.__.__.\n__.__.__.😄__.__.🔵__.__.__.__.__.",
	};

	private string[] _anim1 = {
"🔵__.__.__.__.__.__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.__.",
"__.🔵__.__.__.__.__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.__.",
"__.__.🔵__.__.__.__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.__.",
"__.__.__.🔵__.__.__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.__.",
"__.__.__.__.🔵__.__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.__.",
"__.__.__.__.__.🔵__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.__.",
"__.__.__.__.__.__.🔵__.__.__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.__.",
"__.__.__.__.__.__.__.🔵__.__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.__.",
"__.__.__.__.__.__.__.__.🔵__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.__.",
"__.__.__.__.__.__.__.__.__.🔵__.__.\n__.__.__.__.__.__.__.__.😀__.__.__.",
"__.__.__.__.__.__.__.__.__.__.🔵__.\n🔵__.__.__.__.__.__.__.😀__.__.__.",
"__.__.__.__.__.__.__.__.__.__.__.🔵\n__.🔵__.__.__.__.__.__.😀__.__.__.",
"🔵__.__.__.__.__.__.__.__.__.__.__.\n__.__.🔵__.__.__.__.__.😀__.__.__.",
"__.🔵__.__.__.__.__.__.__.__.__.__.\n__.__.__.🔵__.__.__.__.😀__.__.__.",
"__.__.🔵__.__.__.__.__.__.__.__.__.\n__.__.__.__.🔵__.__.__.😀__.__.__.",
"__.__.__.🔵__.__.__.__.__.__.__.__.\n__.__.__.__.__.🔵__.__.😀__.__.__.",
"__.__.__.__.🔵__.__.__.__.__.__.__.\n__.__.__.__.__.__.🔵__.😀__.__.__.",
"__.__.__.__.__.🔵__.__.__.__.__.__.\n__.__.__.__.__.__.__.🔵😀__.__.__.",
"__.__.__.__.__.__.🔵__.__.__.__.__.\n__.__.__.__.__.__.__.💥😲__.__.__.",
"__.__.__.__.__.__.__.🔵__.__.__.__.\n__.__.__.__.__.__.__.__.😲__.__.__.",
"__.__.__.__.__.__.__.__.🔵__.__.__.\n__.__.__.__.__.__.__.__.😟__.__.__.",
"__.__.__.__.__.__.__.__.__.🔵__.__.\n__.__.__.__.__.__.__.__.😟__.__.__.",
"__.__.__.__.__.__.__.__.__.__.🔵__.\n__.__.__.__.__.__.__.__.😟__.__.__.",
"__.__.__.__.__.__.__.__.__.__.__.🔵\n__.__.__.__.__.__.__.__.😀__.__.__.",
	};

	private string[] _anim2 = {
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n😀__.__.__.__.__.__.__.__.__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.😀__.__.__.__.__.__.__.__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.😀__.__.__.__.__.__.__.__.🔄",
"__.__.😀__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.__.__.__.__.__.__.__.🔄",
"__.__.__.__.🏃__.🥏__.⏲️__.__.__.\n__.__.😀__.__.__.__.__.__.__.__.🔄",
"__.__.__.__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.😀__.__.__.__.__.__.__.🔄",
"__.__.__.__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.😀__.__.__.__.__.__.🔄",
"__.__.__.__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.__.😀__.__.__.__.__.🔄",
"__.__.__.__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.__.__.😀__.__.__.__.🔄",
"__.__.__.__.🏃__.😀__.⏲️__.__.__.\n__.__.__.__.__.__.__.__.__.__.__.🔄",
"__.__.__.__.🏃__.__.__.⏲️__.__.__.\n__.__.__.__.__.__.😀__.__.__.__.🔄",
"__.__.__.__.🏃__.__.__.⏲️__.__.__.\n__.__.__.__.__.__.__.😀__.__.__.🔄",
"__.__.__.__.🏃__.__.__.⏲️__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.🔄",
"__.__.__.__.🏃__.__.__.😀__.__.__.\n__.__.__.__.__.__.__.__.__.__.__.🔄",
"__.__.__.__.🏃__.__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.🔄",
"__.__.__.__.🏃__.__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.__.😀__.🔄",
"__.__.__.__.🏃__.__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.__.__.😀🔄",
"__.__.__.__.🏃__.__.__.__.__.__.__.\n__.__.__.__.__.__.__.__.__.__.__.😀",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.__.__.__.__.__.__.__.😀",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.__.__.__.__.__.__.😀🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.__.__.__.__.__.😀__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.__.__.__.__.😀__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.__.__.__.😀__.__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.__.__.😀__.__.__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.__.😀__.__.__.__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.__.😀__.__.__.__.__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.__.😀__.__.__.__.__.__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.__.😀__.__.__.__.__.__.__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n__.😀__.__.__.__.__.__.__.__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n😀__.__.__.__.__.__.__.__.__.__.🔄",
"__.__.✨__.🏃__.🥏__.⏲️__.__.__.\n😀__.__.__.__.__.__.__.__.__.__.🔄",
	};

	private string[] _anim3 = {
"__.__.__.__.__.__.__.__.🔲__.__.__.\n__.__.😀__.__.__.__.__.🔲__.__.__.",
"__.__.__.__.__.__.__.__.🔲__.__.__.\n__.__.😀__.__.__.__.__.🔲__.__.__.",
"__.__.__.__.__.__.__.🔲__.__.__.__.\n__.__.😀__.__.__.__.🔲__.__.__.__.",
"__.__.__.__.__.__.__.🔲__.__.__.__.\n__.__.😀__.__.__.__.🔲__.__.__.__.",
"__.__.__.__.__.__.🔲__.__.__.__.__.\n__.__.😀__.__.__.🔲__.__.__.__.__.",
"__.__.__.__.__.__.🔲__.__.__.__.__.\n__.__.😀__.__.__.🔲__.__.__.__.__.",
"__.__.__.__.__.🔲__.__.__.__.__.__.\n__.__.😀__.__.🔲__.__.__.__.__.__.",
"__.__.__.__.__.🔲__.__.__.__.__.__.\n__.__.😀__.__.🔲__.__.__.__.__.__.",
"__.__.__.__.🔲__.__.__.__.__.__.__.\n__.__.😀__.🔲__.__.__.__.__.__.__.",
"__.__.__.__.🔲__.__.__.__.__.__.__.\n__.__.😀__.🔲__.__.__.__.__.__.__.",
"__.__.__.🔲__.__.__.__.__.__.__.__.\n__.🏆😎🔲__.__.__.__.__.__.__.__.",
"__.__.__.🔲__.__.__.__.__.__.__.__.\n__.🏆😎🔲__.__.__.__.__.__.__.__.",
"__.__.__.🔲__.__.__.__.__.__.__.__.\n__.🏆😎🔲__.__.__.__.__.__.__.__.",
"__.__.__.__.🔲__.__.__.__.__.__.__.\n__.🏆😎__.🔲__.__.__.__.__.__.__.",
"__.__.__.__.__.🔲__.__.__.__.__.__.\n__.🏆😎__.__.🔲__.__.__.__.__.__.",
"__.__.__.__.__.__.🔲__.__.__.__.__.\n__.__.😎__.__.__.🔲__.__.__.__.__.",
"__.__.__.__.__.__.__.🔲__.__.__.__.\n__.__.😎__.__.__.__.🔲__.__.__.__.",
"__.__.__.__.__.__.__.__.🔲__.__.__.\n__.__.😀__.__.__.__.__.🔲__.__.__.",
"__.__.__.__.__.__.__.__.🔲__.__.__.\n__.__.😀__.__.__.__.__.🔲__.__.__.",
	};

	string GetTime(Connection c)
	{
		TimeSpan time = DateTime.UtcNow - c.ConnectionTime;
		return time.TotalSeconds > 3600 ? time.ToString(@"hh\:mm\:ss") : time.ToString(@"mm\:ss");
	}

	protected override void OnUpdate()
	{
		_tickTimer += Time.Delta;
		if(_tickTimer > 0.25f)
		{
			_tick++;
			_tickTimer = 0f;
		}

		SetClass("hidden", !(Input.Down("Score") || Manager.Instance.IsTabIndicatorHovered));
	}

	protected override int BuildHash() 
	{
		var seconds = RealTime.Now;
		var wholeSeconds = seconds.CeilToInt();
		var tenthSeconds = (int)((seconds - (int)seconds) * 10f);

		return System.HashCode.Combine(wholeSeconds, tenthSeconds, _tick);
	}
}
