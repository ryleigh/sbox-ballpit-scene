@using Sandbox;
@using Sandbox.UI;
@inherits Panel
@attribute [StyleSheet("ItemTooltip.razor.scss")]

<root>
	@{
		var manager = Manager.Instance;
		var isPassive = manager.IsUpgradePassive(UpgradeType);
		var amount_name = isPassive ? "LVL" : "AMMO";
		var rarity = manager.GetRarityForUpgrade(UpgradeType);
		var rarityColor = Manager.GetColorForRarityLabelBg(rarity);
		var maxLevel = manager.GetMaxLevelForUpgrade(UpgradeType);
		var playerLevel = manager.GetPlayer(PlayerNum)?.GetUpgradeLevel(UpgradeType) ?? 0;
	}

	<div class="top_row">
		<div class="name_container">
			<div class="icon">@($"{manager.GetIconForUpgrade(UpgradeType)}")</div>
			<div class="name">@($"{manager.GetNameForUpgrade(UpgradeType)}")</div>
		</div>
		<div class="rarity" style="opacity: 0.7; background-color:@(rarityColor.WithAlpha(0.7f).Rgba);">@($"{manager.GetRarityForUpgrade(UpgradeType)}")</div>
		<div class="level_container">
			<div class="level_label" style="color: @((new Color(0.5f, 0.8f, 0.8f, 0.6f)).Rgba);">@($"{amount_name}")</div>
			<div class="level_amount" style="color: @((Level >= maxLevel ? new Color(1f, 0.5f, 0.5f) : new Color(0.5f, 0.8f, 0.8f)).Rgba);">@($"{Level}/{manager.GetMaxLevelForUpgrade(UpgradeType)}")</div>
		</div>
	</div>

	@if(isPassive)
	{
		<div class="passive">
			Passive
		</div>
	}

	<div class="description">
		@if(IsShopItem && isPassive && manager.GetPlayer(PlayerNum) != null && playerLevel > 0 && playerLevel < maxLevel)
		{
			var newLevel = Math.Min(playerLevel + Level, maxLevel);

			var strings = manager.GetImprovementDescriptionForUpgrade(UpgradeType, playerLevel, newLevel);

			@foreach(var pair in strings) 
			{
				<div style="color:@((pair.Value).Rgba); font-size:@(pair.Key == Manager.DESCRIPTION_ARROW ? 13f : 16f);">@(pair.Key)</div>
			}
		}
		else 
		{
			@($"{manager.GetDescriptionForUpgrade(UpgradeType, Level)}")
		}
	</div>
</root>

@code
{
	public UpgradeType UpgradeType { get; set; }
	public int Level { get; set; }
	public int PlayerNum { get; set; }
	public bool IsShopItem { get; set; }

	protected override int BuildHash()
	{
		var mousePos = Mouse.Position;
		return System.HashCode.Combine(UpgradeType, Level, PlayerNum, mousePos);
	}
}
