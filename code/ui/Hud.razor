@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class="pointer"></div>

	@{
		var manager = Manager.Instance;

		var roundLabel = "";
		switch(manager.GamePhase)
		{
			case GamePhase.WaitingForPlayers:
				roundLabel = "Waiting for players...";
				break;
			case GamePhase.RoundActive:
			case GamePhase.RoundFinished:
				roundLabel = $"Round {manager.RoundNum + 1}";
				break;
			case GamePhase.BuyPhase:
				roundLabel = $"Buy Phase ({MathX.FloorToInt(manager.BuyPhaseDuration - manager.TimeSincePhaseChange)})";
				break;
		}
	}

	<var class="round_display" style="opacity:@(manager.GamePhase == GamePhase.RoundActive ? 1f : 0.7f);">@(roundLabel)</var>

	@if(manager.DoesPlayerExist0)
	{
		var player0 = manager.GetPlayer(0);

		// NAME
		<div class="bottom_row" style="left: 100px; bottom: 45px; flex-direction: row;">
			<div class="player_name" style="color: #0000aa;">@($"{manager.GetConnection(0).DisplayName} 🏆{player0.Score} 💲{player0.Money}")</div>
		</div>

		// HP
		<div class="bottom_row" style="left: 100px; bottom: 10px; flex-direction: row;">
			@for(int i = 0; i < player0.MaxHP; i++)
			{
				<div class="player_hp" style="opacity:@(player0.HP > i ? 1f : 0.15f);">@(player0.HP > i ? "❤️" : "🖤")</div>
			}
		</div>

		// PASSIVE UPGRADES
		<div class="upgrades_passive" style="left: 10px; bottom: 60px; flex-direction: column-reverse;">
			@foreach(var pair in player0.Upgrades)
			{
				var upgradeType = pair.Key;
				if(Globals.IsUpgradePassive(upgradeType))
				{
					var level = pair.Value;
					<UpgradeIcon UpgradeType=@upgradeType Level=@level />	
				}
			}
		</div>

		// ACTIVE UPGRADES
		<div class="upgrades_active" style="left: 360px; bottom: 10px; flex-direction: row;">
			@foreach(var pair in player0.Upgrades)
			{
				var upgradeType = pair.Key;
				if(!Globals.IsUpgradePassive(upgradeType))
				{
					var level = pair.Value;
					if(level > 0)
					{
						<UpgradeIcon UpgradeType=@upgradeType Level=@level />		
					}
				}
			}
		</div>
	}
	
	@if(manager.DoesPlayerExist1)
	{
		var player1 = manager.GetPlayer(1);

		// NAME
		<div class="bottom_row" style="right: 100px; bottom: 45px; flex-direction: row-reverse;">
			<div class="player_name" style="color: #007700;">@($"{manager.GetConnection(1).DisplayName} 🏆{player1.Score} 💲{player1.Money}")</div>
		</div>

		// HP
		<div class="bottom_row" style="right: 100px; bottom: 10px; flex-direction: row-reverse;">
			@for(int i = 0; i < player1.MaxHP; i++)
			{
				<div class="player_hp" style="opacity:@(player1.HP > i ? 1f : 0.15f);">@(player1.HP > i ? "❤️" : "🖤")</div>
			}
		</div>

		// PASSIVE UPGRADES
		<div class="upgrades_passive" style="right: 10px; bottom: 60px; flex-direction: column-reverse;">
			@foreach(var pair in player1.Upgrades)
			{
				var upgradeType = pair.Key;
				if(Globals.IsUpgradePassive(upgradeType))
				{
					var level = pair.Value;
					<UpgradeIcon UpgradeType=@upgradeType Level=@level />	
				}
			}
		</div>

		// ACTIVE UPGRADES
		<div class="upgrades_active" style="right: 360px; bottom: 10px; flex-direction: row;">
			@foreach(var pair in player1.Upgrades)
			{
				var upgradeType = pair.Key;
				if(!Globals.IsUpgradePassive(upgradeType))
				{
					var level = pair.Value;
					if(level > 0)
					{
						<UpgradeIcon UpgradeType=@upgradeType Level=@level />		
					}
				}
			}
		</div>
	}

	@if(manager.HoveredObject != null && manager.HoveredObject.Tags.Has("item"))
	{
		var pos = Scene.Camera.PointToScreenNormal(manager.HoveredObject.Transform.Position);

		<div class="item_description" style="left:@(pos.x * 100f + (pos.x < 0.5f ? 3f : -13.5f))%; top:@(pos.y * 100f - 4f)%;">
			@(Globals.GetDescriptionForUpgrade(manager.HoveredObject.Components.Get<ShopItem>().UpgradeType))
		</div>
	}

	@if(manager.HoveredUpgradeType != UpgradeType.None)
	{
		//Log.Info($"{manager.HoveredUpgradeType} - {Mouse.Position}");

		<div class="item_description" style="left:@(Mouse.Position.x)px; top:@(Mouse.Position.y)px;">
			@(Globals.GetDescriptionForUpgrade(manager.HoveredUpgradeType))
		</div>
	}

	@{
		var localPlayer = manager.GetLocalPlayer();
	}

	@if(localPlayer != null)
	{
		if(localPlayer.IsSpectator)
		{
			@if(!manager.DoesPlayerExist0)
			{
				<div class="join_button" style="left: 400px; bottom: 450px;" onclick=@(() => JoinButtonClicked(0) )>Join</div>
			}

			@if(!manager.DoesPlayerExist1)
			{
				<div class="join_button" style="right: 400px; bottom: 450px;" onclick=@(() => JoinButtonClicked(1) )>Join</div>
			}
		}
		else
		{
			<div class="leave_button" onclick=@(() => LeaveButtonClicked() )>Forfeit</div>
		}
	}

	
</root>

@code
{
	public static Hud Instance { get; private set; }

	public int HashNum { get; set; } = 0;

	protected override void OnAwake()
	{
		base.OnAwake();

		Instance = this;
	}

	void LeaveButtonClicked()
	{
		var localPlayer = Manager.Instance.GetLocalPlayer();
		if(localPlayer != null && !localPlayer.IsSpectator)
		{
			Manager.Instance.PlayerForfeited(localPlayer.GameObject.Id);
		}
	}

	void JoinButtonClicked(int playerNum)
	{
		var localPlayer = Manager.Instance.GetLocalPlayer();
		Manager.Instance.SetPlayerActive(playerNum, localPlayer.GameObject.Id);
	}

	protected override int BuildHash()
	{
		var manager = Manager.Instance;
		var player0 = manager.GetPlayer(0);
		var player1 = manager.GetPlayer(1);
		var playerName0 = manager.GetConnection(0)?.DisplayName ?? "";
		var playerName1 = manager.GetConnection(1)?.DisplayName ?? "";
		var hp0 = player0?.HP ?? 0;
		var hp1 = player1?.HP ?? 0;
		var score0 = player0?.Score ?? 0;
		var score1 = player1?.Score ?? 0;
		var money0 = player0?.Money ?? 0;
		var money1 = player1?.Money ?? 0;
		var upgrades0 = player0?.GetUpgradeHash() ?? 0;
		var upgrades1 = player1?.GetUpgradeHash() ?? 0;
		var buyPhaseTimer = manager.GamePhase == GamePhase.BuyPhase ? MathX.FloorToInt(manager.BuyPhaseDuration - manager.TimeSincePhaseChange) : 0;
		var mouseHoverUpgradePos = manager.HoveredUpgradeType != UpgradeType.None ? Mouse.Position : Vector2.Zero;

		return HashCode.Combine(
			HashCode.Combine(playerName0, playerName1, hp0, hp1, score0, score1),
			HashCode.Combine(money0, money1, upgrades0, upgrades1, manager.RoundNum),
			HashCode.Combine(manager.GamePhase, buyPhaseTimer, manager.HoveredObject, mouseHoverUpgradePos)
		);
	}
}
