@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class="pointer"></div>

	@{
		var manager = Manager.Instance;

		var roundLabel = "";
		switch(manager.GamePhase)
		{
			case GamePhase.WaitingForPlayers:
				roundLabel = "Waiting for players...";
				break;
			case GamePhase.StartingNewMatch:
				roundLabel = $"Starting match in {MathX.CeilToInt(Manager.START_NEW_MATCH_DELAY - manager.TimeSincePhaseChange)}...";
				break;
			case GamePhase.RoundActive:
			case GamePhase.AfterRoundDelay:
				roundLabel = $"Round {manager.RoundNum}";
				break;
			case GamePhase.BuyPhase:
				roundLabel = $"Buy Phase ({MathX.CeilToInt(manager.BuyPhaseDuration - manager.TimeSincePhaseChange)})";
				break;
			case GamePhase.Victory:
				roundLabel = $"{manager.WinningPlayerName} wins! 🏆";
				break;
		}
	}

	<var class="round_display" style="opacity:@(manager.GamePhase == GamePhase.RoundActive ? 1f : 0.7f);">@(roundLabel)</var>

	@if(manager.DoesPlayerExist0)
	{
		var player0 = manager.GetPlayer(0);
		var connection0 = manager.GetConnection(0);

		<PlayerBar Player=@manager.GetPlayer(0) Connection=@manager.GetConnection(0) style="left: 100px; bottom: 2px;" />

		// PASSIVE UPGRADES
		<div class="upgrades_passive" style="left: 10px; bottom: 60px; flex-direction: column-reverse;">
			@foreach(var pair in player0.PassiveUpgrades)
			{
				var upgradeType = pair.Key;
				var level = pair.Value;
				<UpgradeIcon UpgradeType=@upgradeType Level=@level PlayerNum=@(0) />	
			}
		</div>

		// ACTIVE UPGRADES
		<div class="upgrades_active" style="left: 360px; bottom: 10px; flex-direction: row;">
			@foreach(var pair in player0.ActiveUpgrades)
			{
				var upgradeType = pair.Key;
				var level = pair.Value;
				if(level > 0)
				{
					<UpgradeIcon UpgradeType=@upgradeType Level=@level PlayerNum=@(0) />		
				}
			}
		</div>
	}
	
	@if(manager.DoesPlayerExist1)
	{
		var player1 = manager.GetPlayer(1);

		<PlayerBar Player=@manager.GetPlayer(1) Connection=@manager.GetConnection(1) style="right: 100px; bottom: 2px;" />

		// PASSIVE UPGRADES
		<div class="upgrades_passive" style="right: 10px; bottom: 60px; flex-direction: column-reverse;">
			@foreach(var pair in player1.PassiveUpgrades)
			{
				var upgradeType = pair.Key;
				var level = pair.Value;
				<UpgradeIcon UpgradeType=@upgradeType Level=@level PlayerNum=@(1) />	
			}
		</div>

		// ACTIVE UPGRADES
		<div class="upgrades_active" style="right: 360px; bottom: 10px; flex-direction: row;">
			@foreach(var pair in player1.ActiveUpgrades)
			{
				var upgradeType = pair.Key;
				var level = pair.Value;
				if(level > 0)
				{
					<UpgradeIcon UpgradeType=@upgradeType Level=@level PlayerNum=@(1) />		
				}
			}
		</div>
	}

	@if(manager.HoveredObject != null)
	{
		if(manager.HoveredObject.Tags.Has("item"))
		{
			var pos = Scene.Camera.PointToScreenNormal(manager.HoveredObject.Transform.Position);
			var shopItem = manager.HoveredObject.Components.Get<ShopItem>();

			<ItemTooltip UpgradeType=@shopItem.UpgradeType Level=@shopItem.NumLevels PlayerNum=@shopItem.PlayerNum style="left:@(Mouse.Position.x * Panel.ScaleFromScreen - 135)px; top:@(Mouse.Position.y * Panel.ScaleFromScreen - 100)px;" />
		}
	}

	@if(manager.HoveredUpgradeType != UpgradeType.None)
	{
		//Log.Info($"{manager.HoveredUpgradeType} - {Mouse.Position}");
		var player = manager.GetPlayer(manager.HoveredUpgradePlayerNum);
		var level = player?.GetUpgradeLevel(manager.HoveredUpgradeType) ?? 1;
		bool isPassive = manager.IsUpgradePassive(manager.HoveredUpgradeType);
		float xPos = Mouse.Position.x * Panel.ScaleFromScreen - 135f + (isPassive ? (player.PlayerNum == 0 ? 120f : -120f) : 0f);

		<ItemTooltip UpgradeType=@manager.HoveredUpgradeType Level=@level PlayerNum=@manager.HoveredUpgradePlayerNum style="left:@(xPos)px; top:@(Mouse.Position.y * Panel.ScaleFromScreen - 100)px;" />
	}

	@{
		var localPlayer = manager.GetLocalPlayer();
	}

	@if(localPlayer != null)
	{
		if(localPlayer.IsSpectator)
		{
			@if(!manager.DoesPlayerExist0)
			{
				<div class="join_button" style="left: 400px; bottom: 450px;" onclick=@(() => JoinButtonClicked(0) )>Join</div>
			}

			@if(!manager.DoesPlayerExist1)
			{
				<div class="join_button" style="right: 400px; bottom: 450px;" onclick=@(() => JoinButtonClicked(1) )>Join</div>
			}
		}
		else
		{
			<div class="leave_button" onclick=@(() => LeaveButtonClicked() )>Forfeit</div>
		}
	}

	@if(!Input.Down("Score"))
	{
		<div class="tab_indicator">TAB</div>
	}
</root>

@code
{
	public static Hud Instance { get; private set; }

	public int HashNum { get; set; } = 0;

	protected override void OnAwake()
	{
		base.OnAwake();

		Instance = this;
	}

	void LeaveButtonClicked()
	{
		var localPlayer = Manager.Instance.GetLocalPlayer();
		if(localPlayer != null && !localPlayer.IsSpectator)
		{
			Manager.Instance.PlayerForfeited(localPlayer.GameObject.Id);
		}
	}

	void JoinButtonClicked(int playerNum)
	{
		var localPlayer = Manager.Instance.GetLocalPlayer();
		Manager.Instance.PlayerHitJoinButton(playerNum, localPlayer.GameObject.Id);
	}

	protected override int BuildHash()
	{
		var manager = Manager.Instance;
		var player0 = manager.GetPlayer(0);
		var player1 = manager.GetPlayer(1);
		var playerName0 = manager.GetConnection(0)?.DisplayName ?? "";
		var playerName1 = manager.GetConnection(1)?.DisplayName ?? "";
		var hp0 = player0?.HP ?? 0;
		var hp1 = player1?.HP ?? 0;
		var money0 = player0?.Money ?? 0;
		var money1 = player1?.Money ?? 0;
		var upgrades0 = player0?.GetUpgradeHash() ?? 0;
		var upgrades1 = player1?.GetUpgradeHash() ?? 0;
		var buyPhaseTimer = manager.GamePhase == GamePhase.BuyPhase ? MathX.FloorToInt(manager.BuyPhaseDuration - manager.TimeSincePhaseChange) : 0;
		var newMatchTimer = manager.GamePhase == GamePhase.StartingNewMatch ? MathX.CeilToInt(Manager.START_NEW_MATCH_DELAY - manager.TimeSincePhaseChange) : 0;
		var tooltipPos = (manager.HoveredObject != null || manager.HoveredUpgradeType != UpgradeType.None) ? Mouse.Position : Vector2.Zero;

		return HashCode.Combine(
			HashCode.Combine(playerName0, playerName1, hp0, hp1, Input.Down("Score")),
			HashCode.Combine(money0, money1, upgrades0, upgrades1, manager.RoundNum),
			HashCode.Combine(manager.GamePhase, buyPhaseTimer, newMatchTimer, manager.HoveredObject, tooltipPos)
		);
	}
}
